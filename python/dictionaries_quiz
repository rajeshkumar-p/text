1) What is the output of the following program?

dictionary = {'GFG' : 'geeksforgeeks.org', 
              'google' : 'google.com', 
              'facebook' : 'facebook.com'
              } 
del dictionary['google']; 
for key, values in dictionary.items(): 
    print(key) 
dictionary.clear(); 
for key, values in dictionary.items(): 
    print(key) 
del dictionary; 
for key, values in dictionary.items(): 
    print(key) 

a) Both b and d
b) Runtime error
c) GFG
facebook
d) facebook
GFG

Ans. (a)
Output:
facebook
GFG

Explanation: The statement: del dictionary; removes the entire dictionary, so
iterating over a deleted dictionary throws a runtime error as follows:

Traceback (most recent call last):
  File "cbeac2f0e35485f19ae7c07f6b416e84.py", line 12, in 
    for key, values in dictionary.items():
NameError: name 'dictionary' is not defined

2) What is the output of the following program?

dictionary1 = {'Google' : 1, 
               'Facebook' : 2, 
               'Microsoft' : 3
               } 
dictionary2 = {'GFG' : 1, 
               'Microsoft' : 2, 
               'Youtube' : 3
               } 
dictionary1.update(dictionary2); 
for key, values in dictionary1.items(): 
    print(key, values) 

a) Compilation error
b) Runtime error
c) (‘Google’, 1)
(‘Facebook’, 2)
(‘Youtube’, 3)
(‘Microsoft’, 2)
(‘GFG’, 1)
d) None of these

Ans. (c)
Explanation: dictionary1.update(dictionary2) is used to update the entries of
dictionary1 with entries of dictionary2. If there are same keys in two
dictionaries, then the value in second dictionary is used.

3) What is the output of the following program?

dictionary1 = {'GFG' : 1, 
               'Google' : 2, 
               'GFG' : 3
               } 
print(dictionary1['GFG']); 

a) Compilation error due to duplicate keys
b) Runtime time error due to duplicate keys
c) 3
d) 1

Ans. (c)
Explanation: Here, GFG is the duplicate key. Duplicate keys are not allowed in
python. If there are same keys in a dictionay, then the value assigned mostly
recently is assigned to the that key.

4) What is the output of the following program?
temp = dict() 
temp['key1'] = {'key1' : 44, 'key2' : 566} 
temp['key2'] = [1, 2, 3, 4] 
for (key, values) in temp.items(): 
    print(values, end = "") 

a) Compilation error
b) {‘key1’: 44, ‘key2’: 566}[1, 2, 3, 4]
c) Runtime error
d) None of the above

Ans. (b)
Explanation: A dictionary can hold any value such as an integer, string, list or
even another dictionary holding key value pairs.
Note: This code can be executed only in python versions above 3

5) What is the output of the following program?
temp = {'GFG' : 1, 
        'Facebook' : 2, 
        'Google' : 3
        } 
for (key, values) in temp.items(): 
    print(key, values, end = " ") 

a) Google 3 GFG 1 Facebook 2
b) Facebook 2 GFG 1 Google 3
c) Facebook 2 Google 3 GFG 1
d) Any of the above

Ans. (d)
Explanation: Dictionaries are unordered. So any key value pairs can be added at
any location within a dictionary. Any of the output may come.
Note: This code can be executed only in python versions above 3.


Which of these about a dictionary is false?
a) The values of a dictionary can be accessed using keys
b) The keys of a dictionary can be accessed using values
c) Dictionaries may or may not be ordered
d) None of the above

Ans.(b)
Explanation: The values of a dictionary can be accessed using keys but the keys
of a dictionary can’t be accessed using values.

4. What will be the output?
test = {1:'A', 2:'B', 3:'C'} 
del test[1] 
test[1] = 'D'
del test[2] 
print(len(test)) 

Options:
1) 2
2) 1
3) 0
4) Error

Output:
1. 2
Explanation: After the key-value pair of 1:’A’ is deleted, the key-value pair of
1:’D’ is added.

5. What will be the output?
a ={} 
a['a']= 1
a['b']=[2, 3, 4] 
print(a) 

Options:
1) {‘b’: [2], ‘a’: 1}
2) {‘b’: [2, 3, 4], ‘a’: 1}
3) {‘b’: [2], ‘a’: [3]}
4) Error

Output:
2. {‘b’: [2, 3, 4], ‘a’: 1}

Explanation: Mutable members can be used as the values of the dictionary but
they cannot be used as the keys of the dictionary.

What will be the output?
dictionary ={1:"geek", 2:"for", 3:"geeks"} 
del dictionary 

Options:
    del deletes the entire dictionary
    del doesn’t exist for the dictionary
    del deletes the keys in the dictionary
    del doesn’t exist for dictionary

Output:
1. del deletes the entire dictionary

Explanation: del deletes the entire dictionary and any further attempt to access
it will throw an error.

What will be the output?
dictionary = {"geek":10, "for":45, "geeks": 90} 
print("geek" in dictionary) 

Options:
    10
    False
    True
    Error

Output:
3. True
Explanation: in is used to check the key exist in dictionary or not.
